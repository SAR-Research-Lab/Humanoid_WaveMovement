#!/usr/bin/env python
import rospy
from std_msgs.msg import Bool
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal

global wave_requested

def request_callback(wave_arm):
    global wave_requested 
    # Let the application be responsible for 
    # returning this state to false to allow
    # the waving action to complete
    if wave_arm.data == True:   
        wave_requested = True

def get_goal_position(position_to_send): 

    if position_to_send == "WAVE_HOME":
        wave_goal_position = [1.5868, 1.4897, 2.546, 0, 0.7125, -2.79253]
    elif position_to_send == "WAVE_UP":
        wave_goal_position = [1.5868, 0.349066, 1.74533, 0, 0.7125, -2.79253]	
    elif position_to_send == "WAVE_LEFT":
        wave_goal_position = [1.5868, 0.349066, 2.18166, 0, 0.7125, -2.79253]	
    elif position_to_send == "WAVE_RIGHT":
        wave_goal_position = [1.5868, 0.349066, 1.309, 0, 0.7125, -2.79253]	
    else:
       wave_goal_position = [0, 0, 0, 0, 0, 0]

    print position_to_send

    return wave_goal_position

def send_waveposition(end_position):

    goal = FollowJointTrajectoryGoal()
    goal.goal_time_tolerance = rospy.Time(1)
    test_goal = JointTrajectory()
    test_goal.header.stamp = rospy.Time.now()
    test_goal.header.seq = 1
    test_goal.joint_names = ["arm_1_joint", "arm_2_joint", "arm_3_joint", "arm_4_joint", "arm_5_joint", "arm_6_joint"]
    point = JointTrajectoryPoint()
    point.positions = [0, 0, 0, 0, 0, 0]
    point.velocities = [1, 1, 1, 1, 1, 1]
    point.time_from_start = rospy.Duration.from_sec(1)

    test_goal.points = []
    test_goal.points.append(point)

    point2 = JointTrajectoryPoint()
    point2.positions = get_goal_position(end_position)
    point2.velocities = [1, 1, 1, 1, 1, 1]
    point2.time_from_start = rospy.Duration.from_sec(2)

    test_goal.points = []
    test_goal.points.append(point2)
    goal.trajectory = test_goal
    goal.goal_time_tolerance = rospy.Duration(10)
    return goal

def sync_send(requested_position):
    print(requested_position)
    goal = send_waveposition(requested_position)
    client = actionlib.SimpleActionClient("/arm/joint_trajectory_controller/follow_joint_trajectory/", FollowJointTrajectoryAction)
    client.wait_for_server(timeout=rospy.Duration(5.0))
    print("Got server")
    client.send_goal(goal)
    print("Goal sent")
    success = client.wait_for_result(timeout=rospy.Duration(2.0))
    print("Got result: " + str(success))
    # Wait for movement to complete
    rospy.sleep(1) # Sleeps for 1 sec
    return success

def run_arm_movement():
    global wave_requested

    # Local inits 
    wave_types = ["WAVE_LEFT", "WAVE_RIGHT", "WAVE_LEFT", "WAVE_RIGHT", "WAVE_LEFT", "WAVE_RIGHT", "WAVE_HOME"]
    wave_requested = False        

    # Loop forever
    while not rospy.is_shutdown():
        #Command the arm motions if requested externally
        if wave_requested == True:
            position = 0
            while position < len(wave_types):
                # Loop through all of the waving motion
                if sync_send(wave_types[position]) is True:
                    position = position + 1
            
            #Wait for the next request to come in
            wave_requested = False
        rospy.sleep(1) # Sleeps for 1 sec

def arm_movement_init():
    print("Initialization...")
    # Set up publish and subscribers
    pub = rospy.Publisher('/arm/joint_trajectory_controller/command', JointTrajectory, queue_size=1)
    sub = rospy.Subscriber("arm_commander", Bool, request_callback)

    # Init node
    rospy.init_node('arm_movement_node', anonymous=True)

    # Set the arm to a starting home position with retry
    if sync_send("WAVE_HOME") is False:
        sync_send("WAVE_HOME") 

    print("Initialization complete!")

if __name__ == '__main__':
    try:
        arm_movement_init()
        run_arm_movement()
    except rospy.ROSInterruptException:
        print("Exiting...")
        quit()
