#!/usr/bin/env python
import rospy
import numpy as np
import cv2
import time
from threading import Thread
from sensor_msgs.msg import Image, RegionOfInterest
from cv_bridge import CvBridge, CvBridgeError



def image_callback(data, args):
	global face_candidate	
	#print "Image received!"
	try:
		face_candidate = args.imgmsg_to_cv2(data, "bgr8")
	except CvBridgeError as e:
		print(e)

def face_detect_init():
	# Set up a new node for facial detection
	rospy.init_node('robo_face_detect', anonymous=True)

	#Create the ROS Image to OpenCV bridge
	myBridge = CvBridge()

	#Subscribe to the image topic to receive image data
	image_subscriber = rospy.Subscriber('/right/image_rect_gray', Image, image_callback, (myBridge))
     
          
def run_face_detect(): 
	global face_candidate

	#Initialize the Region of Interest for publishing
	my_roi = RegionOfInterest()
	roi_pub = rospy.Publisher("/roi", RegionOfInterest, queue_size = 1)

	face_cascade = cv2.CascadeClassifier('/home/rebecca/projects/ECE591_WS/src/face_detect/bin/haarcascade_frontalface_default.xml')
    #img = cv2.imread('/home/rebecca/projects/ECE591_WS/src/face_detect/bin/rebecca.jpg')

	while not rospy.is_shutdown():

		#Initialize ROI to known values and always publish even when face is not detected
		my_roi.x_offset = 0
		my_roi.y_offset = 0
		my_roi.height = 0
		my_roi.width = 0

		if face_candidate is not None:
			gray = cv2.cvtColor(face_candidate, cv2.COLOR_BGR2GRAY)
			faces = face_cascade.detectMultiScale(gray, 1.3, 5)

			for (x,y,w,h) in faces:
				print x
				print y
				print w
				print h
				my_roi.x_offset = x
				my_roi.y_offset = y
				my_roi.height = h
				my_roi.width = w
				cv2.rectangle(face_candidate,(x,y),(x+w,y+h),(255,0,0),2)

		#Publish the region of interest
		roi_pub.publish(my_roi)

		#Diagnostics show the image
		cv2.imshow('Smile!', face_candidate)

		#Wait 10ms before next process
		cv2.waitKey(10)

	cv2.destroyAllWindows()	


if __name__ == '__main__':
	try:
		#Initialize the face detection node
		face_detect_init()

        #Run the face detection
	   	run_face_detect()
	except rospy.ROSInterruptException:
		quit()
